import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import asyncio

API_TOKEN = '7912812196:AAGu9YWhQ0W7KMYjgTbPOqkVT4X3pwkAwc4'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
meals = [
    {"name": "–ü–∏—Ü—Ü–∞", "recipe_link": "https://example.com/pizza", "restaurant_link": "https://restaurant.com/pizza"},
    {"name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "recipe_link": "https://example.com/caesar-salad", "restaurant_link": "https://restaurant.com/caesar-salad"},
    {"name": "–ë–æ—Ä—â", "recipe_link": "https://example.com/borshch", "restaurant_link": "https://restaurant.com/borshch"},
    {"name": "–ü–∞—Å—Ç–∞", "recipe_link": "https://example.com/pasta", "restaurant_link": "https://restaurant.com/pasta"},
    {"name": "–°—Ç–µ–π–∫", "recipe_link": "https://example.com/steak", "restaurant_link": "https://restaurant.com/steak"},
    {"name": "–®–∞—à–ª—ã–∫", "recipe_link": "https://example.com/shashlyk", "restaurant_link": "https://restaurant.com/shashlyk"},
    {"name": "–†–æ–ª–ª—ã", "recipe_link": "https://example.com/rolls", "restaurant_link": "https://restaurant.com/rolls"},
    {"name": "–ü–µ–ª—å–º–µ–Ω–∏", "recipe_link": "https://example.com/pelmeni", "restaurant_link": "https://restaurant.com/pelmeni"},
    {"name": "–°—É–ø", "recipe_link": "https://example.com/soup", "restaurant_link": "https://restaurant.com/soup"},
    {"name": "–û–ª–∏–≤—å–µ", "recipe_link": "https://example.com/olivier", "restaurant_link": "https://restaurant.com/olivier"},
    {"name": "–ö—É—Ä–∏—Ü–∞", "recipe_link": "https://example.com/chicken", "restaurant_link": "https://restaurant.com/chicken"},
    {"name": "–ë–ª–∏–Ω—á–∏–∫–∏", "recipe_link": "https://example.com/pancakes", "restaurant_link": "https://restaurant.com/pancakes"},
    {"name": "–ú–æ—Ä—Å", "recipe_link": "https://example.com/mors", "restaurant_link": "https://restaurant.com/mors"},
    {"name": "–ö–æ—Ñ–µ", "recipe_link": "https://example.com/coffee", "restaurant_link": "https://restaurant.com/coffee"},
    {"name": "–°–º—É–∑–∏", "recipe_link": "https://example.com/smoothie", "restaurant_link": "https://restaurant.com/smoothie"}
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –±–ª—é–¥–∞–º–∏
def create_meal_keyboard():
    keyboard = ReplyKeyboardBuilder()
    for meal in meals:
        keyboard.add(KeyboardButton(text=meal["name"]))
    return keyboard.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –±–ª—é–¥! üçΩ –í—ã–±–∏—Ä–∞–π –±–ª—é–¥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=create_meal_keyboard()
    )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–ª—é–¥–∞
@dp.message(lambda message: any(meal["name"] == message.text for meal in meals))
async def choose_meal(message: types.Message):
    selected_meal = next(meal for meal in meals if meal["name"] == message.text)
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Web App –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    inline_kb = InlineKeyboardBuilder()
    inline_kb.add(InlineKeyboardButton(text="–ì–¥–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?", web_app=WebAppInfo(url=selected_meal["restaurant_link"])))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    await message.answer(
        f"–¢—ã –≤—ã–±—Ä–∞–ª {selected_meal['name']}! üéâ –í–æ—Ç —Ä–µ—Ü–µ–ø—Ç: {selected_meal['recipe_link']}\n"
        f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç–æ –±–ª—é–¥–æ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
        reply_markup=inline_kb.as_markup()
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
